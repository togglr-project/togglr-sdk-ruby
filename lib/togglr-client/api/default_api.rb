# #SDK API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.15.0
#

require 'cgi'

module TogglrClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get health status of feature (including auto-disable state)
    # @param feature_key [String]
    # @param [Hash] opts the optional parameters
    # @return [FeatureHealth]
    def get_feature_health(feature_key, opts = {})
      data, _status_code, _headers = get_feature_health_with_http_info(feature_key, opts)
      data
    end

    # Get health status of feature (including auto-disable state)
    # @param feature_key [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureHealth, Integer, Hash)>] FeatureHealth data, response status code and response headers
    def get_feature_health_with_http_info(feature_key, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.get_feature_health ...' if @api_client.config.debugging
      # verify the required parameter 'feature_key' is set
      if @api_client.config.client_side_validation && feature_key.nil?
        raise ArgumentError, "Missing the required parameter 'feature_key' when calling DefaultApi.get_feature_health"
      end

      # resource path
      local_var_path = '/sdk/v1/features/{feature_key}/health'.sub('{' + 'feature_key' + '}',
                                                                   CGI.escape(feature_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureHealth'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        operation: :'DefaultApi.get_feature_health',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_feature_health\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Report feature execution error (for auto-disable)
    # @param feature_key [String]
    # @param feature_error_report [FeatureErrorReport]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def report_feature_error(feature_key, feature_error_report, opts = {})
      report_feature_error_with_http_info(feature_key, feature_error_report, opts)
      nil
    end

    # Report feature execution error (for auto-disable)
    # @param feature_key [String]
    # @param feature_error_report [FeatureErrorReport]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def report_feature_error_with_http_info(feature_key, feature_error_report, opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.report_feature_error ...' if @api_client.config.debugging
      # verify the required parameter 'feature_key' is set
      if @api_client.config.client_side_validation && feature_key.nil?
        raise ArgumentError, "Missing the required parameter 'feature_key' when calling DefaultApi.report_feature_error"
      end

      # verify the required parameter 'feature_error_report' is set
      if @api_client.config.client_side_validation && feature_error_report.nil?
        raise ArgumentError,
              "Missing the required parameter 'feature_error_report' when calling DefaultApi.report_feature_error"
      end

      # resource path
      local_var_path = '/sdk/v1/features/{feature_key}/report-error'.sub('{' + 'feature_key' + '}',
                                                                         CGI.escape(feature_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(feature_error_report)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        operation: :'DefaultApi.report_feature_error',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#report_feature_error\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Evaluate feature for given context
    # Returns feature evaluation result for given project and context. The project is derived from the API key.
    # @param feature_key [String]
    # @param request_body [Hash<String, Object>]
    # @param [Hash] opts the optional parameters
    # @return [EvaluateResponse]
    def sdk_v1_features_feature_key_evaluate_post(feature_key, request_body, opts = {})
      data, _status_code, _headers = sdk_v1_features_feature_key_evaluate_post_with_http_info(feature_key,
                                                                                              request_body, opts)
      data
    end

    # Evaluate feature for given context
    # Returns feature evaluation result for given project and context. The project is derived from the API key.
    # @param feature_key [String]
    # @param request_body [Hash<String, Object>]
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluateResponse, Integer, Hash)>] EvaluateResponse data, response status code and response headers
    def sdk_v1_features_feature_key_evaluate_post_with_http_info(feature_key, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.sdk_v1_features_feature_key_evaluate_post ...'
      end
      # verify the required parameter 'feature_key' is set
      if @api_client.config.client_side_validation && feature_key.nil?
        raise ArgumentError,
              "Missing the required parameter 'feature_key' when calling DefaultApi.sdk_v1_features_feature_key_evaluate_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        raise ArgumentError,
              "Missing the required parameter 'request_body' when calling DefaultApi.sdk_v1_features_feature_key_evaluate_post"
      end

      # resource path
      local_var_path = '/sdk/v1/features/{feature_key}/evaluate'.sub('{' + 'feature_key' + '}',
                                                                     CGI.escape(feature_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'EvaluateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        operation: :'DefaultApi.sdk_v1_features_feature_key_evaluate_post',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sdk_v1_features_feature_key_evaluate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Health check for SDK server
    # @param [Hash] opts the optional parameters
    # @return [HealthResponse]
    def sdk_v1_health_get(opts = {})
      data, _status_code, _headers = sdk_v1_health_get_with_http_info(opts)
      data
    end

    # Health check for SDK server
    # @param [Hash] opts the optional parameters
    # @return [Array<(HealthResponse, Integer, Hash)>] HealthResponse data, response status code and response headers
    def sdk_v1_health_get_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: DefaultApi.sdk_v1_health_get ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/sdk/v1/health'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HealthResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'DefaultApi.sdk_v1_health_get',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#sdk_v1_health_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
